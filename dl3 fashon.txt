from keras.datasets import fashion_mnist
(train_X,train_Y), (test_X,test_Y) = fashion_mnist.load_data()

-----------------------------------------------------------------
import numpy as np
from keras.utils import to_categorical
import matplotlib.pyplot as plt
%matplotlib inline

print('Training data shape : ', train_X.shape, train_Y.shape)

print('Testing data shape : ', test_X.shape, test_Y.shape)

-----------------------------------------------------------------
# Find the unique numbers from the train labels
classes = np.unique(train_Y)
nClasses = len(classes)
print('Total number of outputs : ', nClasses)
print('Output classes : ', classes)

-----------------------------------------------------------------
plt.figure(figsize=[5,5])

# Display the first image in training data
plt.subplot(121)
plt.imshow(train_X[0,:,:], cmap='gray')
plt.title("Ground Truth : {}".format(train_Y[0]))

# Display the first image in testing data
plt.subplot(122)
plt.imshow(test_X[0,:,:], cmap='gray')
plt.title("Ground Truth : {}".format(test_Y[0]))

-----------------------------------------------------------------
train_X = train_X.reshape(-1, 28,28, 1)
test_X = test_X.reshape(-1, 28,28, 1)
train_X.shape, test_X.shape

-----------------------------------------------------------------
train_X = train_X.astype('float32')
test_X = test_X.astype('float32')
train_X = train_X / 255.
test_X = test_X / 255.

-----------------------------------------------------------------
# Change the labels from categorical to one-hot encoding
train_Y_one_hot = to_categorical(train_Y)
test_Y_one_hot = to_categorical(test_Y)

# Display the change for category label using one-hot encoding
print('Original label:', train_Y[0])
print('After conversion to one-hot:', train_Y_one_hot[0])


-----------------------------------------------------------------
from sklearn.model_selection import train_test_split
train_X,valid_X,train_label,valid_label = train_test_split(train_X, train_Y_one_hot, test_size=0.2, random_state=13)

-----------------------------------------------------------------
train_X.shape,valid_X.shape,train_label.shape,valid_label.shape

-----------------------------------------------------------------
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import BatchNormalization
#from keras.layers.normalization import BatchNormalization
#from keras.layers.advanced_activations import LeakyReLU
from keras.layers import LeakyReLU

-----------------------------------------------------------------
#from keras.models import Input
from keras.models import Model

-----------------------------------------------------------------
batch_size = 64
epochs = 20
num_classes = 10

-----------------------------------------------------------------
fashion_model = Sequential()
fashion_model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(28,28,1),padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))
fashion_model.add(MaxPooling2D((2, 2),padding='same'))
fashion_model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))
fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
fashion_model.add(Conv2D(128, (3, 3), activation='linear',padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))                  
fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
fashion_model.add(Flatten())
fashion_model.add(Dense(128, activation='linear'))
fashion_model.add(LeakyReLU(alpha=0.1))                  
fashion_model.add(Dense(num_classes, activation='softmax'))


-----------------------------------------------------------------
fashion_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])

-----------------------------------------------------------------
fashion_model.summary()

-----------------------------------------------------------------
fashion_train = fashion_model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))

-----------------------------------------------------------------
test_eval = fashion_model.evaluate(test_X, test_Y_one_hot, verbose=0)

-----------------------------------------------------------------
print('Test loss:', test_eval[0])
print('Test accuracy:', test_eval[1])

-----------------------------------------------------------------
accuracy = fashion_train.history['accuracy']
val_accuracy = fashion_train.history['val_accuracy']
loss = fashion_train.history['loss']
val_loss = fashion_train.history['val_loss']
epochs = range(len(accuracy))
plt.plot(epochs, accuracy, 'bo', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()

-----------------------------------------------------------------
# Adding Dropout into the Network
batch_size = 64
epochs = 20
num_classes = 10

-----------------------------------------------------------------
fashion_model = Sequential()
fashion_model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',padding='same',input_shape=(28,28,1)))
fashion_model.add(LeakyReLU(alpha=0.1))
fashion_model.add(MaxPooling2D((2, 2),padding='same'))
fashion_model.add(Dropout(0.25))
fashion_model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))
fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
fashion_model.add(Dropout(0.25))
fashion_model.add(Conv2D(128, (3, 3), activation='linear',padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))                  
fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
fashion_model.add(Dropout(0.4))
fashion_model.add(Flatten())
fashion_model.add(Dense(128, activation='linear'))
fashion_model.add(LeakyReLU(alpha=0.1))           
fashion_model.add(Dropout(0.3))
fashion_model.add(Dense(num_classes, activation='softmax'))


-----------------------------------------------------------------
fashion_model.summary()

-----------------------------------------------------------------
fashion_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])

-----------------------------------------------------------------
fashion_train_dropout = fashion_model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))

-----------------------------------------------------------------
fashion_model.save("fashion_model_dropout.h5py")

-----------------------------------------------------------------
test_eval = fashion_model.evaluate(test_X, test_Y_one_hot, verbose=1)

-----------------------------------------------------------------
print('Test loss:', test_eval[0])
print('Test accuracy:', test_eval[1])

-----------------------------------------------------------------
accuracy = fashion_train_dropout.history['accuracy']
val_accuracy = fashion_train_dropout.history['val_accuracy']
loss = fashion_train_dropout.history['loss']
val_loss = fashion_train_dropout.history['val_loss']
epochs = range(len(accuracy))
plt.plot(epochs, accuracy, 'bo', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()

-----------------------------------------------------------------
predicted_classes = fashion_model.predict(test_X)

-----------------------------------------------------------------
predicted_classes = np.argmax(np.round(predicted_classes),axis=1)

-----------------------------------------------------------------
predicted_classes.shape, test_Y.shape

-----------------------------------------------------------------
correct = np.where(predicted_classes==test_Y)[0]
print("Found %d correct labels" % len(correct))
for i, correct in enumerate(correct[:9]):
    plt.subplot(3,3,i+1)
    plt.imshow(test_X[correct].reshape(28,28), cmap='gray', interpolation='none')
    plt.title("Predicted {}, Class {}".format(predicted_classes[correct], test_Y[correct]))
    plt.tight_layout()

-----------------------------------------------------------------
incorrect = np.where(predicted_classes!=test_Y)[0]
print("Found %d incorrect labels" % len(incorrect))
for i, incorrect in enumerate(incorrect[:9]):
    plt.subplot(3,3,i+1)
    plt.imshow(test_X[incorrect].reshape(28,28), cmap='gray', interpolation='none')
    plt.title("Predicted {}, Class {}".format(predicted_classes[incorrect], test_Y[incorrect]))
    plt.tight_layout()

-----------------------------------------------------------------
from sklearn.metrics import classification_report
target_names = ["Class {}".format(i) for i in range(num_classes)]
print(classification_report(test_Y, predicted_classes, target_names=target_names))





















Data Loading and Setup

from keras.datasets import fashion_mnist
(train_X,train_Y), (test_X,test_Y) = fashion_mnist.load_data()
Loads the Fashion MNIST dataset from Keras (60,000 training + 10,000 testing grayscale 28x28 images).

train_X: training images, train_Y: training labels (0â€“9).

test_X, test_Y: testing set.

Basic Imports and Data Inspection

import numpy as np
from keras.utils import to_categorical
import matplotlib.pyplot as plt
%matplotlib inline
numpy: for matrix ops.

to_categorical: one-hot encode labels (for softmax classifier).

matplotlib: for plotting images and metrics.

%matplotlib inline: Jupyter magic for inline plots.


print('Training data shape : ', train_X.shape, train_Y.shape)
print('Testing data shape : ', test_X.shape, test_Y.shape)
Prints shapes like (60000, 28, 28) and (60000,).

Class Distribution

classes = np.unique(train_Y)
nClasses = len(classes)
print('Total number of outputs : ', nClasses)
print('Output classes : ', classes)
Identifies 10 classes (0 to 9).

nClasses: total distinct labels.

Visualize Data

plt.figure(figsize=[5,5])
plt.subplot(121)
plt.imshow(train_X[0,:,:], cmap='gray')
plt.title("Ground Truth : {}".format(train_Y[0]))
Plots the first training image in grayscale.

Shows its label.


plt.subplot(122)
plt.imshow(test_X[0,:,:], cmap='gray')
plt.title("Ground Truth : {}".format(test_Y[0]))
Plots the first test image similarly.

Reshaping Data

train_X = train_X.reshape(-1, 28,28, 1)
test_X = test_X.reshape(-1, 28,28, 1)
Adds a channel dimension (for Conv2D), making shape (60000, 28, 28, 1).

Normalization

train_X = train_X.astype('float32')
test_X = test_X.astype('float32')
train_X = train_X / 255.
test_X = test_X / 255.
Converts pixel values from uint8 to float32 and normalizes to range [0,1].

One-Hot Encoding

train_Y_one_hot = to_categorical(train_Y)
test_Y_one_hot = to_categorical(test_Y)
Converts integer labels like 3 to [0 0 0 1 0 0 0 0 0 0].


print('Original label:', train_Y[0])
print('After conversion to one-hot:', train_Y_one_hot[0])
Confirms one-hot conversion.

Validation Split

from sklearn.model_selection import train_test_split
train_X,valid_X,train_label,valid_label = train_test_split(train_X, train_Y_one_hot, test_size=0.2, random_state=13)
Splits training set into 80% training and 20% validation.

Model Building: CNN (No Dropout)

fashion_model = Sequential()
fashion_model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(28,28,1),padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))
fashion_model.add(MaxPooling2D((2, 2),padding='same'))
Conv Layer (32 filters, 3x3), activation via LeakyReLU.

Max pooling reduces spatial dimensions.


fashion_model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))
fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
2nd Conv + pooling layer with 64 filters.


fashion_model.add(Conv2D(128, (3, 3), activation='linear',padding='same'))
fashion_model.add(LeakyReLU(alpha=0.1))                  
fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
3rd Conv layer (more filters for deep features).


fashion_model.add(Flatten())
fashion_model.add(Dense(128, activation='linear'))
fashion_model.add(LeakyReLU(alpha=0.1))                  
fashion_model.add(Dense(num_classes, activation='softmax'))
Flatten into 1D.

Dense fully connected layers.

Output uses softmax for multi-class classification.

Compile and Train

fashion_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])
fashion_train = fashion_model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))
Loss: categorical crossentropy.

Optimizer: Adam.

Trains for 20 epochs.

Model Evaluation

test_eval = fashion_model.evaluate(test_X, test_Y_one_hot, verbose=0)
print('Test loss:', test_eval[0])
print('Test accuracy:', test_eval[1])
Evaluates model on test data.

Accuracy and Loss Plotting

accuracy = fashion_train.history['accuracy']
val_accuracy = fashion_train.history['val_accuracy']
...
plt.plot(epochs, accuracy, ...)
Plots training vs validation accuracy and loss over epochs.

Model With Dropout (Regularization)

fashion_model.add(Dropout(0.25))
Dropout randomly disables neurons during training to prevent overfitting.

Training repeated similarly with fit() and saving model using:

fashion_model.save("fashion_model_dropout.h5py")
Prediction & Visualization

predicted_classes = fashion_model.predict(test_X)
predicted_classes = np.argmax(np.round(predicted_classes),axis=1)
Gets model predictions and converts from probabilities to class labels.


correct = np.where(predicted_classes==test_Y)[0]
...
incorrect = np.where(predicted_classes!=test_Y)[0]
Finds correct and incorrect predictions, then plots them.

Classification Report

from sklearn.metrics import classification_report
print(classification_report(test_Y, predicted_classes, target_names=target_names))
Provides precision, recall, F1-score for each class.
